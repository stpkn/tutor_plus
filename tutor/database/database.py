import sqlite3
import os
from typing import Optional, Dict, Any


class Database:
    def __init__(self, db_path='database/tutoring.db'):
        self.db_path = db_path

    def get_connection(self):
        try:
            os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
            connection = sqlite3.connect(self.db_path)
            connection.row_factory = sqlite3.Row
            return connection
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return None

    def connect(self):
        return self.get_connection()

    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏–∑ SQL —Å–∫—Ä–∏–ø—Ç–∞"""
        connection = self.get_connection()
        if not connection:
            return

        try:
            if not os.path.exists('database/schema.sql'):
                print("‚ùå –§–∞–π–ª database/schema.sql –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            print("üìÅ –ß—Ç–µ–Ω–∏–µ database/schema.sql...")
            with open('database/schema.sql', 'r', encoding='utf-8') as f:
                sql_script = f.read()
                print(f"üìÑ –†–∞–∑–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞: {len(sql_script)} —Å–∏–º–≤–æ–ª–æ–≤")

            cursor = connection.cursor()
            cursor.executescript(sql_script)
            connection.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tutor
            cursor.execute("SELECT COUNT(*) as count FROM users WHERE username = 'tutor'")
            result = cursor.fetchone()
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 'tutor' –≤ –±–∞–∑–µ: {result['count']}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        finally:
            connection.close()

    def authenticate_user(self, username: str, password: str):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        connection = self.get_connection()
        if not connection:
            return None

        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
            user = cursor.fetchone()

            if not user:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            user_dict = dict(user)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user_dict}")
            print(f"üîë –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π: –≤–≤–µ–¥–µ–Ω '{password}', –≤ –±–∞–∑–µ '{user_dict['password_hash']}'")

            # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
            if user_dict['password_hash'] == password:
                print("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π!")
                return user_dict
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
                return None

        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return None
        finally:
            connection.close()

    def create_student(self, username, password, first_name, last_name, tutor_id, contact_info, exam_type, lesson_price,
                       day_of_week, lesson_time):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
        connection = self.get_connection()
        if not connection:
            return False

        try:
            cursor = connection.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
            cursor.execute('SELECT id FROM users WHERE username = ?', (username,))
            if cursor.fetchone():
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å exam_type
            cursor.execute('''
                INSERT INTO users (
                    username, password_hash, role, first_name, last_name, 
                    exam_type, lesson_price, contact_info, created_by, is_active
                ) VALUES (?, ?, 'student', ?, ?, ?, ?, ?, ?, 1)
            ''', (username, password, first_name, last_name, exam_type, lesson_price, contact_info, tutor_id))

            student_id = cursor.lastrowid

            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
            # –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É (topic) –¥–ª—è –∑–∞–Ω—è—Ç–∏–π
            cursor.execute('''
                INSERT INTO topics (title, description, created_by)
                VALUES (?, ?, ?)
            ''', (f'–ó–∞–Ω—è—Ç–∏—è —Å {first_name} {last_name}', f'–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ {exam_type.upper()}',
                  tutor_id))

            topic_id = cursor.lastrowid

            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            start_time = lesson_time
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–∑–∞–Ω—è—Ç–∏–µ –¥–ª–∏—Ç—Å—è 1 —á–∞—Å)
            from datetime import datetime, timedelta
            start_dt = datetime.strptime(start_time, '%H:%M')
            end_dt = start_dt + timedelta(hours=1)
            end_time = end_dt.strftime('%H:%M')

            cursor.execute('''
                INSERT INTO schedule (student_id, tutor_id, topic_id, day_of_week, start_time, end_time, status)
                VALUES (?, ?, ?, ?, ?, ?, 'active')
            ''', (student_id, tutor_id, topic_id, day_of_week, start_time, end_time))

            connection.commit()

            print(
                f"‚úÖ –£—á–µ–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω: {first_name} {last_name} (ID: {student_id}) —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: {day_of_week} {start_time}-{end_time}")
            return student_id

        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞: {e}")
            return False
        finally:
            connection.close()

    def get_tutor_students(self, tutor_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        connection = self.get_connection()
        if not connection:
            return []

        try:
            cursor = connection.cursor()
            cursor.execute("""
                SELECT 
                    u.id, u.username, u.first_name, u.last_name, 
                    u.exam_type, u.lesson_price, u.contact_info, u.created_at,
                    s.day_of_week, s.start_time as lesson_time
                FROM users u
                LEFT JOIN schedule s ON u.id = s.student_id AND s.status = 'active'
                WHERE u.created_by = ? AND u.role = 'student' AND u.is_active = 1
                ORDER BY u.created_at DESC
            """, (tutor_id,))

            students = []
            for row in cursor.fetchall():
                student = dict(row)
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                student['progress'] = self.calculate_student_progress(student['id'])
                student['lesson_count'] = self.get_student_lesson_count(student['id'])
                students.append(student)

            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(students)}")
            return students

        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤: {e}")
            return []
        finally:
            connection.close()

    def update_schema(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ exam_type"""
        connection = self.get_connection()
        if not connection:
            return False

        try:
            cursor = connection.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ exam_type
            cursor.execute("PRAGMA table_info(users)")
            columns = [column[1] for column in cursor.fetchall()]

            # –î–æ–±–∞–≤–ª—è–µ–º exam_type –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'exam_type' not in columns:
                print("üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É exam_type –≤ —Ç–∞–±–ª–∏—Ü—É users...")
                cursor.execute('ALTER TABLE users ADD COLUMN exam_type VARCHAR(10) CHECK (exam_type IN ("oge", "ege"))')
                connection.commit()
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ exam_type –¥–æ–±–∞–≤–ª–µ–Ω–∞")

            return True

        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã: {e}")
            return False
        finally:
            connection.close()

    def get_student_schedule(self, student_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞"""
        connection = self.get_connection()
        if not connection:
            return []

        try:
            cursor = connection.cursor()
            cursor.execute("""
                SELECT s.id, s.day_of_week, s.start_time, s.end_time, s.lesson_link, s.status,
                       t.title as topic_title, u.first_name as tutor_name
                FROM schedule s
                JOIN topics t ON s.topic_id = t.id
                JOIN users u ON s.tutor_id = u.id
                WHERE s.student_id = ? AND s.status = 'active'
                ORDER BY 
                    CASE s.day_of_week
                        WHEN 'monday' THEN 1
                        WHEN 'tuesday' THEN 2
                        WHEN 'wednesday' THEN 3
                        WHEN 'thursday' THEN 4
                        WHEN 'friday' THEN 5
                        WHEN 'saturday' THEN 6
                        WHEN 'sunday' THEN 7
                    END,
                    s.start_time
            """, (student_id,))
            return [dict(row) for row in cursor.fetchall()]
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return []
        finally:
            connection.close()

    def get_tutor_schedule(self, tutor_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
        connection = self.get_connection()
        if not connection:
            return []

        try:
            cursor = connection.cursor()
            cursor.execute("""
                SELECT s.id, s.day_of_week, s.start_time, s.end_time, s.lesson_link, s.status,
                       t.title as topic_title, 
                       u.first_name as student_name, u.last_name as student_last_name
                FROM schedule s
                JOIN topics t ON s.topic_id = t.id
                JOIN users u ON s.student_id = u.id
                WHERE s.tutor_id = ? AND s.status = 'active'
                ORDER BY 
                    CASE s.day_of_week
                        WHEN 'monday' THEN 1
                        WHEN 'tuesday' THEN 2
                        WHEN 'wednesday' THEN 3
                        WHEN 'thursday' THEN 4
                        WHEN 'friday' THEN 5
                        WHEN 'saturday' THEN 6
                        WHEN 'sunday' THEN 7
                    END,
                    s.start_time
            """, (tutor_id,))
            return [dict(row) for row in cursor.fetchall()]
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞: {e}")
            return []
        finally:
            connection.close()

    def calculate_student_progress(self, student_id: int):
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—á–µ–Ω–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        import random
        return random.randint(50, 95)

    def get_student_lesson_count(self, student_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç–∏–π —É—á–µ–Ω–∏–∫–∞"""
        connection = self.get_connection()
        if not connection:
            return 0

        try:
            cursor = connection.cursor()
            cursor.execute("""
                SELECT COUNT(*) as count 
                FROM lessons 
                WHERE schedule_id IN (
                    SELECT id FROM schedule WHERE student_id = ?
                )
            """, (student_id,))

            result = cursor.fetchone()
            return result['count'] if result else 0

        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç–∏–π: {e}")
            return 0
        finally:
            connection.close()